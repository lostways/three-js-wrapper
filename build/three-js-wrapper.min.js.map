{"version":3,"file":"three-js-wrapper.min.js","sources":["../src/WrappedThree.js","../src/ThreeJSWrapper.js","../src/ThreeJSEntity.js"],"sourcesContent":["import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\n\n// Wrap our THREE instance\nconst WrappedThree = Object.assign({}, THREE, {\n  OrbitControls,\n  GLTFLoader,\n});\n\n// Export our wrapped THREE instance\nexport default WrappedThree;\n","import WrappedThree from \"./WrappedThree.js\";\n\nexport default class ThreeJSWrapper {\n  //constructor\n  // @param {HTMLCanvasElement} canvas - The canvas element to render to\n  constructor(canvas) {\n    if (!(canvas && typeof canvas === \"object\")) {\n      throw new Error(\"canvas is required to construct wrapper\");\n    }\n\n    //canvas\n    this.canvas = canvas;\n\n    //dimensions\n    this.dimensions = {\n      width: canvas.width,\n      height: canvas.height,\n    };\n\n    //camera\n    this.camera = this.buildCamera();\n\n    //scene\n    this.scene = new THREE.Scene();\n\n    //renderer\n    this.renderer = this.buildRenderer();\n\n    //controls\n    this.controls = new WrappedThree.OrbitControls(\n      this.camera,\n      this.renderer.domElement\n    );\n\n    //loader\n    this.loader = new WrappedThree.GLTFLoader();\n\n    //clock\n    this.clock = new THREE.Clock();\n\n    //running flag\n    this.isRunning = false;\n  }\n\n  //static THREE instance\n  static get THREE() {\n    return THREE;\n  }\n\n  //add an entity to the scene\n  // @param {ThreeJSEntity} entity - The entity to add\n  addEntity(entity) {\n    this.scene.add(entity.object3d);\n  }\n\n  //remove en entity from the scene\n  // @param {ThreeJSEntity} entity - The entity to remove\n  removeEntity(entity) {\n    if (\n      !(\n        entity &&\n        typeof entity === \"object\" &&\n        entity.object3d instanceof THREE.Object3D\n      )\n    ) {\n      throw new Error(\"Can't remove invalid ThreeJSEntity\");\n    }\n\n    if (!this.scene.children.includes(entity.object3d)) {\n      throw new Error(\"Can't remove entity that is not in scene\");\n    }\n\n    let object3d = entity.object3d;\n\n    if (object3d instanceof THREE.Mesh) {\n      if (object3d.geometry) {\n        object3d.geometry.dispose();\n      }\n\n      if (object3d.material) {\n        if (object3d.material instanceof Array) {\n          object3d.material.forEach((material) => material.dispose());\n        } else {\n          object3d.material.dispose();\n        }\n      }\n    }\n\n    this.scene.remove(entity.object3d);\n  }\n\n  //start the animation loop\n  start() {\n    this.resize();\n    this.bindEventListeners();\n    this.render();\n    this.loop();\n    this.isRunning = true;\n  }\n\n  //render the scene\n  render() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  //update the scene animation\n  update() {\n    let delta = this.clock.getDelta();\n    this.scene.children.forEach((ent) => {\n      ent.dispatchEvent({ type: \"update\", delta: delta });\n    });\n  }\n\n  //the animation loop\n  loop() {\n    requestAnimationFrame(this.loop.bind(this));\n    this.update();\n    this.render();\n  }\n\n  //resize the scene to the current canvas size\n  resize() {\n    this.fullscreen();\n\n    let { width, height } = this.canvas;\n\n    this.dimensions.width = width;\n    this.dimensions.height = height;\n\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n\n    this.renderer.setSize(width, height);\n  }\n\n  //fullscreen the canvas\n  fullscreen() {\n    this.canvas.style.width = \"100%\";\n    this.canvas.style.height = \"100%\";\n\n    this.canvas.width = this.canvas.offsetWidth;\n    this.canvas.height = this.canvas.offsetHeight;\n  }\n\n  //event listeners\n  bindEventListeners() {\n    window.onresize = this.resize.bind(this);\n  }\n\n  //build our three js renderer\n  // @returns {THREE.WebGLRenderer} - The renderer\n  buildRenderer() {\n    let { width, height } = this.dimensions;\n    let renderer = new THREE.WebGLRenderer({ canvas: this.canvas });\n    renderer.setSize(width, height);\n    return renderer;\n  }\n\n  //build our camera\n  // @returns {THREE.PerspectiveCamera} - The camera\n  buildCamera() {\n    let { width, height } = this.dimensions;\n    let fov = 75;\n    let aspect = width / height;\n    let near = 0.1;\n    let far = 1000;\n\n    return new THREE.PerspectiveCamera(fov, aspect, near, far);\n  }\n}\n","// src/ThreeJSEntity.js\nimport ThreeJSWrapper from \"./ThreeJSWrapper.js\";\n\n//Entity base class\nexport default class ThreeJSEntity {\n  constructor(params = {}) {\n    this.params = params;\n    this.THREE = ThreeJSWrapper.THREE;\n    this.object3d = this.create();\n    this.object3d.addEventListener(\"update\", this.update.bind(this));\n  }\n\n  /**\n   * Override to create Object3D\n   */\n  create() {\n    throw new Error(\"Entities must have a create method\");\n  }\n\n  /**\n   * Override to define animations\n   * @param {Object} event - Update event containing delta time\n   */\n  update(event) {}\n}\n"],"names":["WrappedThree","Object","assign","THREE","OrbitControls","GLTFLoader","ThreeJSWrapper","constructor","canvas","Error","this","dimensions","width","height","camera","buildCamera","scene","Scene","renderer","buildRenderer","controls","domElement","loader","clock","Clock","isRunning","addEntity","entity","add","object3d","removeEntity","Object3D","children","includes","Mesh","geometry","dispose","material","Array","forEach","remove","start","resize","bindEventListeners","render","loop","update","delta","getDelta","ent","dispatchEvent","type","requestAnimationFrame","bind","fullscreen","aspect","updateProjectionMatrix","setSize","style","offsetWidth","offsetHeight","window","onresize","WebGLRenderer","PerspectiveCamera","params","create","addEventListener","event"],"mappings":"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"}